package com.huami.watch.train.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.huami.watch.train.model.DayTrainRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DayTrainRecord.
*/
public class DayTrainRecordDao extends AbstractDao<DayTrainRecord, Long> {

    public static final String TABLENAME = "DayTrainRecord";

    /**
     * Properties of entity DayTrainRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TrainRecordId = new Property(1, Long.class, "trainRecordId", false, "TRAIN_RECORD_ID");
        public final static Property TrainType = new Property(2, Integer.class, "trainType", false, "TRAIN_TYPE");
        public final static Property RateStart = new Property(3, Integer.class, "rateStart", false, "RATE_START");
        public final static Property RateEnd = new Property(4, Integer.class, "rateEnd", false, "RATE_END");
        public final static Property OffsetDays = new Property(5, Integer.class, "offsetDays", false, "OFFSET_DAYS");
        public final static Property DayTrainStatus = new Property(6, Integer.class, "dayTrainStatus", false, "DAY_TRAIN_STATUS");
        public final static Property Distance = new Property(7, Double.class, "distance", false, "DISTANCE");
        public final static Property RunremindId = new Property(8, Integer.class, "runremindId", false, "RUNREMIND_ID");
        public final static Property SwimTimeMin = new Property(9, Integer.class, "swimTimeMin", false, "SWIM_TIME_MIN");
        public final static Property SwimTimeMax = new Property(10, Integer.class, "swimTimeMax", false, "SWIM_TIME_MAX");
    };


    public DayTrainRecordDao(DaoConfig config) {
        super(config);
    }
    
    public DayTrainRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DayTrainRecord' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TRAIN_RECORD_ID' INTEGER," + // 1: trainRecordId
                "'TRAIN_TYPE' INTEGER," + // 2: trainType
                "'RATE_START' INTEGER," + // 3: rateStart
                "'RATE_END' INTEGER," + // 4: rateEnd
                "'OFFSET_DAYS' INTEGER," + // 5: offsetDays
                "'DAY_TRAIN_STATUS' INTEGER," + // 6: dayTrainStatus
                "'DISTANCE' REAL," + // 7: distance
                "'RUNREMIND_ID' INTEGER," + // 8: runremindId
                "'SWIM_TIME_MIN' INTEGER," + // 9: swimTimeMin
                "'SWIM_TIME_MAX' INTEGER);"); // 10: swimTimeMax
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DayTrainRecord'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DayTrainRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long trainRecordId = entity.getTrainRecordId();
        if (trainRecordId != null) {
            stmt.bindLong(2, trainRecordId);
        }
 
        Integer trainType = entity.getTrainType();
        if (trainType != null) {
            stmt.bindLong(3, trainType);
        }
 
        Integer rateStart = entity.getRateStart();
        if (rateStart != null) {
            stmt.bindLong(4, rateStart);
        }
 
        Integer rateEnd = entity.getRateEnd();
        if (rateEnd != null) {
            stmt.bindLong(5, rateEnd);
        }
 
        Integer offsetDays = entity.getOffsetDays();
        if (offsetDays != null) {
            stmt.bindLong(6, offsetDays);
        }
 
        Integer dayTrainStatus = entity.getDayTrainStatus();
        if (dayTrainStatus != null) {
            stmt.bindLong(7, dayTrainStatus);
        }
 
        Double distance = entity.getDistance();
        if (distance != null) {
            stmt.bindDouble(8, distance);
        }
 
        Integer runremindId = entity.getRunremindId();
        if (runremindId != null) {
            stmt.bindLong(9, runremindId);
        }
 
        Integer swimTimeMin = entity.getSwimTimeMin();
        if (swimTimeMin != null) {
            stmt.bindLong(10, swimTimeMin);
        }
 
        Integer swimTimeMax = entity.getSwimTimeMax();
        if (swimTimeMax != null) {
            stmt.bindLong(11, swimTimeMax);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DayTrainRecord readEntity(Cursor cursor, int offset) {
        DayTrainRecord entity = new DayTrainRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // trainRecordId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // trainType
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // rateStart
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // rateEnd
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // offsetDays
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // dayTrainStatus
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // distance
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // runremindId
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // swimTimeMin
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // swimTimeMax
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DayTrainRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTrainRecordId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTrainType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRateStart(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setRateEnd(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setOffsetDays(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDayTrainStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDistance(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setRunremindId(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSwimTimeMin(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setSwimTimeMax(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DayTrainRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DayTrainRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
