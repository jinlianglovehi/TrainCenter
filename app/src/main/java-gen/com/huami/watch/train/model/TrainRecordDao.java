package com.huami.watch.train.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.huami.watch.train.model.TrainRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TrainRecord.
*/
public class TrainRecordDao extends AbstractDao<TrainRecord, Long> {

    public static final String TABLENAME = "TrainRecord";

    /**
     * Properties of entity TrainRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TrainType = new Property(1, Integer.class, "trainType", false, "TRAIN_TYPE");
        public final static Property TrainTitle = new Property(2, String.class, "trainTitle", false, "TRAIN_TITLE");
        public final static Property Copywriter = new Property(3, String.class, "copywriter", false, "COPYWRITER");
        public final static Property TrainStatus = new Property(4, Integer.class, "trainStatus", false, "TRAIN_STATUS");
        public final static Property StartData = new Property(5, java.util.Date.class, "startData", false, "START_DATA");
        public final static Property EndData = new Property(6, java.util.Date.class, "endData", false, "END_DATA");
        public final static Property TrainDays = new Property(7, Integer.class, "trainDays", false, "TRAIN_DAYS");
    };


    public TrainRecordDao(DaoConfig config) {
        super(config);
    }
    
    public TrainRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TrainRecord' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TRAIN_TYPE' INTEGER," + // 1: trainType
                "'TRAIN_TITLE' TEXT," + // 2: trainTitle
                "'COPYWRITER' TEXT," + // 3: copywriter
                "'TRAIN_STATUS' INTEGER," + // 4: trainStatus
                "'START_DATA' INTEGER," + // 5: startData
                "'END_DATA' INTEGER," + // 6: endData
                "'TRAIN_DAYS' INTEGER);"); // 7: trainDays
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TrainRecord'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TrainRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer trainType = entity.getTrainType();
        if (trainType != null) {
            stmt.bindLong(2, trainType);
        }
 
        String trainTitle = entity.getTrainTitle();
        if (trainTitle != null) {
            stmt.bindString(3, trainTitle);
        }
 
        String copywriter = entity.getCopywriter();
        if (copywriter != null) {
            stmt.bindString(4, copywriter);
        }
 
        Integer trainStatus = entity.getTrainStatus();
        if (trainStatus != null) {
            stmt.bindLong(5, trainStatus);
        }
 
        java.util.Date startData = entity.getStartData();
        if (startData != null) {
            stmt.bindLong(6, startData.getTime());
        }
 
        java.util.Date endData = entity.getEndData();
        if (endData != null) {
            stmt.bindLong(7, endData.getTime());
        }
 
        Integer trainDays = entity.getTrainDays();
        if (trainDays != null) {
            stmt.bindLong(8, trainDays);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TrainRecord readEntity(Cursor cursor, int offset) {
        TrainRecord entity = new TrainRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // trainType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // trainTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // copywriter
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // trainStatus
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // startData
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // endData
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // trainDays
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TrainRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTrainType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTrainTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCopywriter(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTrainStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStartData(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setEndData(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setTrainDays(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TrainRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TrainRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
